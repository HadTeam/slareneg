// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"server/internal/auth"
	"server/internal/cache"
	"server/internal/config"
	"server/internal/game/map"
	"server/internal/lobby"
	"server/internal/queue"
	"server/internal/websocket"
)

// Injectors from wire.go:

func InitializeApplication(cfg *config.Config) (*Application, error) {
	inMemoryUserRepository := auth.NewInMemoryUserRepository()
	jwtTokenService := provideJWTTokenService(cfg)
	argon2PasswordService := auth.NewArgon2PasswordService()
	authService := auth.NewAuthService(inMemoryUserRepository, jwtTokenService, argon2PasswordService)
	inMemoryQueue := queue.NewInMemoryQueue()
	defaultMapManager := provideMapManager()
	lobbyLobby := lobby.NewLobby(inMemoryQueue, defaultMapManager)
	webSocketServer := websocket.NewWebSocketServer(inMemoryQueue)
	cacheService := provideCacheService(cfg)
	application := &Application{
		Config:      cfg,
		AuthService: authService,
		Lobby:       lobbyLobby,
		WSServer:    webSocketServer,
		Cache:       cacheService,
		MapManager:  defaultMapManager,
	}
	return application, nil
}

// wire.go:

type Application struct {
	Config      *config.Config
	AuthService *auth.AuthService
	Lobby       *lobby.Lobby
	WSServer    *websocket.WebSocketServer
	Cache       *cache.CacheService
	MapManager  gamemap.MapManager
}

func provideJWTTokenService(cfg *config.Config) *auth.JWTTokenService {
	return auth.NewJWTTokenService(cfg.Auth.JWTSecret)
}

func provideCacheService(cfg *config.Config) *cache.CacheService {
	inMemoryCache := cache.NewInMemoryCache(cfg.Cache.CleanupInterval)
	return cache.NewCacheService(inMemoryCache)
}

func provideMapManager() *gamemap.DefaultMapManager {
	return gamemap.NewMapManager()
}
